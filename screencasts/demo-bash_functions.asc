#!/usr/bin/env asciinema-rec_script
: "\`${script:=$0}\`"
: "There'll be \`${SLEEP:-5}s\` countdowns where you can hit \`[space]\` to pause."

sleep ${SLEEP:-5}
# First we'll write a function `f1` that just prints out some variables
source "${script%.asc}/f1.1"


sleep ${SLEEP:-5}
# Note that vars can be accessed using `$a` or `${a}` syntax
echo "a='$a', b='${b}', c='$c'"


sleep ${SLEEP:-5}
# And double quotes are used for interpolation of:
#  * env vars           (eg. `"${a}"`   )
#  * functions/commands (eg. `"$(date)"`)


sleep ${SLEEP:-5}
# So let's call our function
 f1


sleep ${SLEEP:-5}
# Nothing there, so we'll set a couple of env vars for it
# (And remember to *never* put spaces around the `=`)
a='a 0'
b='b 0'


sleep ${SLEEP:-5}
# Now we'll call it again
 f1


sleep ${SLEEP:-5}
# Next we'll change `f1` to accept "arguments"
# Unfortunately bash functions don't have named arguments,
# they just use positional parameters `$1`, `$2` etc
# 
# So we're going to assign them to variables.
# ie. like function "arguments" in other languages...
source "${script%.asc}/f1.2"


sleep ${SLEEP:-5}
# Then call `f1` (checking on our env vars BEFORE & AFTER the call)
:;echo "BEFORE: $(printf "a='$a', b='$b', c='$c'" | $CAT)"
 f1   'a 1'    'b 1'    'c 1'
:;echo "AFTER : $(printf "a='$a', b='$b', c='$c'" | $CAT)"

sleep ${SLEEP:-5}
# Hang on!
# üëé Fail!
# That's no good, the `$a` & `$b` env vars we set previously have changed!


sleep ${SLEEP:-5}
# Let's try again.
# But first re-assign `$a` & `$b`...
a='a 0'
b='b 0'
unset c # and unset `$c`


sleep ${SLEEP:-5}
# Then fix our function by using `local` env vars...
source "${script%.asc}/f1.3"


sleep ${SLEEP:-5}
# Now we'll just check to make sure it worked...
:;echo "BEFORE: $(printf "a='$a', b='$b', c='$c'" | $CAT)"
 f1   'a 1'    'b 1'    'c 1'
:;echo "AFTER : $(printf "a='$a', b='$b', c='$c'" | $CAT)"


sleep ${SLEEP:-5}
# üèÜ Success!
# No global env vars were harmed in the making or calling of this function.


sleep ${SLEEP:-5}
# Now, give the "arguments" default values using `${name:-default}` syntax
source "${script%.asc}/f1.4"

 f1   'a 1'


sleep ${SLEEP:-5}
# Now, what about defaulting to the values of env vars outside the function?
# ie. with this syntax:  `a=${1:-$a}`

# And how bout falling back to our original default values?
# ie. with this syntax:  `a=${1:-${a:-a 2}}`
source "${script%.asc}/f1.5"

 f1   'a 1'


sleep ${SLEEP:-5}
# Now, let's get even funkier with `$c` and get its default from a function.
# And just cause we can, let's call *it's* function `c`
c() { date; }

sleep ${SLEEP:-5}
# ie. which just prints the date
c


sleep ${SLEEP:-5}
# So now change `c=...` in `f1` to make use of our `$(c)` function...
source "${script%.asc}/f1.6"

 f1   'a 1'


sleep ${SLEEP:-5}
# Now let's mix things up a bit and call `f1` in a different way.
# We can call it in context of new values for `$b` & `$c`,
# by placing them in front of the call to `f1`.

# ü§î ... but won't that change the global values for `$b` & `$c`?

# Let's check:
sleep ${SLEEP:-5}
:;echo "BEFORE: a='$a', b='$b', c='$c'"
c='c 3' b='b 3'   f1   'a 1'
:;echo "AFTER : a='$a', b='$b', c='$c'"


sleep ${SLEEP:-5}
# üèÜ Success!
# Once again...
# No global env vars were harmed in the making or calling of this function.


sleep ${SLEEP:-5}
# Hmm... now here's one more trick, but IMO it's more trouble than it's worth.
# This trick involves passing in var assignments as "arguments" to the
# function, for `local` to evaluate.
# *Then* we can default back to original values with a *second* `local`.


sleep ${SLEEP:-5}
# That magic function (which we'll call `f2` for short) looks like this:
source "${script%.asc}/f2"


# And it can be called like this...
sleep ${SLEEP:-5}
 f2  a='a 4' b='b 4'


# Or this...
sleep ${SLEEP:-5}
a='a 4'  f2  b='b 4'


# Or this...
sleep ${SLEEP:-5}
a='a 4'  f2  c='c 4' b='b 4'
